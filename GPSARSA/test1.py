import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from GPSARSA.gpsarsa import GPSARSA



x = [0.4151660695017675,0.3751720848810427,0.38111409134769536,0.3880062007303644,0.21046891341213447,0.2530666061283193,0.19395833961601927,0.39202010772929485,0.4039428468456532,0.34593490302816277,0.31889642940795493,0.22769827593041236,0.35353237387280756,0.2617628483312848,0.4233765800830851,0.4170250094187111,0.18574213885913193,0.32391568592912756,0.3252050871169744,0.3919722018906465,0.40844335354868466,0.4073429311976495,0.36903091207155125,0.2021349345895005,0.41123936657924764,0.3222280724743102,0.21757123467160766,0.43289657500657497,0.27842785262977787,0.32292514384808046,0.1958603746627059,0.3038376773928676,0.20101684577997092,0.3315307868226859,0.37463254488946773,0.1614837491267146,0.17942255197370927,0.3681058930277844,0.2612186194229509,0.29239639264006156,0.40921186131959,0.4412146021916751,0.3025233694361654,0.2830349611069285,0.3435775220483326,0.2511040917375411,0.3852680613324341,0.29850422227836415,0.35443622809581643,0.3955549263114797,0.32293284350419804,0.3588396419526737,0.2386505656509258,0.20170099739966918,0.26707990841067786,0.23589723618451797,0.2730444518642149,0.33279715411181954,0.32298459276799607,0.2365245589281164,0.3141573002445368,0.27825888577327995,0.416315183603413,0.21778501150480822,0.21946676441163193,0.3505433654866109,0.23298289737371314,0.23503755503236723,0.2553657861342593,0.27801200125904657,0.18062022617941964,0.2853849985708139,0.20948741231984824,0.24760867522060437]
y = [0.27987146836832455,0.15258633100167074,0.17347683016624893,0.256488484548377,0.27082145244012845,0.1207704828155034,0.1883904830772004,0.13054554082956105,0.19577730296524032,0.24127184896312426,0.06652072615507032,0.32002550827292986,0.19453232486343164,0.15554195700751605,0.226004848450162,0.24991685324705482,0.1813904639707976,0.31987671989687116,0.20290412737547625,0.24722900817831428,0.28316792517359446,0.13155542348614324,0.17160877367513883,0.19015678965771365,0.18718118882404622,0.08119686569874551,0.1716320418071251,0.16943572037851007,0.29612106574215313,0.10457063522461796,0.23853453218259724,0.12161907404526784,0.2420169509140787,0.2624588560590634,0.20645316904174238,0.18279952559627044,0.2565448183544913,0.14378204056404564,0.07086408479305717,0.06626278421043441,0.2591972342880946,0.1975986551846125,0.1935444682175561,0.2808961059980678,0.2696725090680656,0.23764968638786044,0.2985607285161831,0.09937967698451056,0.17606976531444307,0.21127899786091775,0.19218190745403196,0.08786108273748006,0.17278331119139168,0.25004727465867327,0.07091612003846814,0.13575746343529016,0.22248636772255725,0.18945899879794215,0.21169984457092894,0.2940151177362679,0.1688644091477658,0.13900905208941639,0.23711748981170955,0.12149438452568195,0.18871072942539757,0.23760123815674072,0.13475819486342955,0.17372907163063156,0.13217596219677719,0.13954418606421937,0.2356850558124629,0.2650497815056122,0.2641484643621739,0.20875358269196964]

S = np.array([x, y]).T

N_S = [[[0, 0, 0] for i in range(5)] for j in range(len(x))]
N_R = [[0 for i in range(5)] for i in range(len(x))]

for i in range(len(x)):

    distance_array = S - S[i]

    euclidian_array = np.array([np.dot(distance_array[j], distance_array[j]) for j in range(len(x)) ])

    for k in range(4):
        s = np.argsort(euclidian_array)

        N_S[i][k][0] = S[s[k+1]][0]
        N_S[i][k][1] = S[s[k+1]][1]
        N_S[i][k][2] = s[k+1]
        N_R[i][k] = 4-k

    r= np.random.randint(0, len(x)-1)
    N_S[i][-1][0] = S[r][0]
    N_S[i][-1][1] = S[r][1]


N_S = np.array(N_S)
N_R = np.array(N_R)


a = 43
P = [S[a]]
t = a
for i in range(10):
    P.append(N_S[t][0][:2])
    t = int(N_S[t][0][2])

P = np.array(P)


P2 = [S[a]]
t = a
for i in range(10):
    P2.append(N_S[t][3][:2])
    t = int(N_S[t][3][2])

P2 = np.array(P2)
#training
#print("START")

#G = GPSARSA(0.5,05e-7,1,P[0], 3)
#G.iterate(S[a], 0)


#for i in range(9):
 #   ans = G.iterate(P[i+1], 3)
'''    
for i in range(9):
   G.iterate(P2[i+1], 0)
'''
#print("test1")

#G.iterate(S[a], 2, with_update=False)
#G.iterate(N_S[a][0][:2], 3, with_update=False)
#G.iterate(N_S[a][1][:2], 2, with_update=False)
#G.iterate(N_S[a][2][:2], 1, with_update=False)
#G.iterate(N_S[a][3][:2], 0, with_update=False)



#print(G.D)

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)

plt.scatter(x, y, c="red")

#plt.scatter(P2[:, 0], P2[:, 1], c="green")
#plt.plot(P2[:, 0], P2[:, 1])
#plt.scatter(P[:, 0], P[:, 1], c="green")
#plt.plot(P[:, 0], P[:, 1])
#plt.scatter(S[70][0], S[70][1], c= "yellow")
plt.scatter(N_S[70][:, 0], N_S[70][:, 1], c="blue")

#plt.scatter(S[25][0], S[25][1], c= "yellow")
plt.scatter(N_S[25][:, 0], N_S[25][:, 1], c="green")
plt.title("Adjucent_State_Selection")
plt.legend(("State Space", "State1", "State2"))
#plt.show()
plt.savefig("Adjacent_state_selection_diag.png")
